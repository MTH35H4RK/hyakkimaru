#include <util/atomic.h>
#include <math.h>

#include <QTRSensors.h>

#include <Wire.h>
#include <Adafruit_TCS34725.h>

Adafruit_TCS34725 tcs = Adafruit_TCS34725(TCS34725_INTEGRATIONTIME_24MS, TCS34725_GAIN_16X);

QTRSensors qtr;
QTRSensors qtr2;

int FlagLineFollow = 0;
const uint8_t SensorCount = 8;
const uint8_t SensorCount2 = 8;

uint16_t sensorValues[SensorCount];
uint16_t sensorValues2[SensorCount2];

const int enca[] = { 19, 18 };
const int encb[] = { 15, 14 };
const int pwm[] = { 10, 2 };
const int in1[] = { 8, 4 };
const int in2[] = { 9, 3 };
long St = 0;


bool MOVE = true;

class SimplePID {
  private:
    float kp, kd, ki, umax;
    float eprev, eintegral;

  public:
    SimplePID() : kp(1), kd(0), ki(0), umax(150), eprev(0.0), eintegral(0.0) {}

    void setParams(float kpIn, float kdIn, float kiIn, float umaxIn) {
      kp = kpIn; kd = kdIn; ki = kiIn; umax = umaxIn;
    }

    void evalu(int value, int target, float deltaT, int &pwr, int &dir) {
      int e = target - value;
      float dedt = (e - eprev) / (deltaT);
      eintegral = eintegral + e * deltaT;
      float u = kp * e + kd * dedt + ki * eintegral;
      pwr = (int) fabs(u);
      if ( pwr > umax ) {
        pwr = umax;
      }
      dir = 1;
      if (u < 0) {
        dir = -1;
      }
      eprev = e;
    }
};




#define NMOTORS 2
#define M0 0
#define M1 1


long prevT = 0;
int posPrev[] = {0, 0};

volatile int posi[] = {0, 0};

SimplePID pid[NMOTORS];

void setMotor(int dir, int pwmVal, int pwm, int in1, int in2) {
  analogWrite(pwm, pwmVal);
  if (dir == 1) {
    digitalWrite(in1, HIGH);
    digitalWrite(in2, LOW);
  }
  else if (dir == -1) {
    digitalWrite(in1, LOW);
    digitalWrite(in2, HIGH);
  }
  else {
    digitalWrite(in1, LOW);
    digitalWrite(in2, LOW);
  }
}

template <int j>
void readEncoder() {
  int b = digitalRead(encb[j]);
  if (b > 0) {
    posi[j]++;
  }
  else {
    posi[j]--;
  }
}

float target_f[] = {0, 0};
long target[] = {0, 0};
int tot = 0;

void setTarget(float t, float deltat) {
  float positionChange[2] = {0.0, 0.0};
  float pulsesPerTurn = 350;
  float pulsesPerMeter = pulsesPerTurn * 9.3620554759938432805225743160306;



  if (MOVE) {
    t = fmod(t, 100); // time is in seconds
  }
  Serial.print(t);
  float velocity = 0.25;


  float turn21 = 0.03482439024;
  float turn114 = 0.1899821903;
  float turn33 = 0.05519567987;
  float turn83 = 0.1398958322;
  float turn61 = 0.1053984164;
  float turn28 = 0.04759513157;
  float turn22 = 0.03809637726;

  if (t < 1) {////////////////DARHA 1
    positionChange[0] = 10 * deltat * turn21 * pulsesPerTurn;
    positionChange[1] = -10 * deltat * turn21 * pulsesPerTurn; //21 degree cw
  } else if (t < 3) {////////////////DARHA 2

    positionChange[0] = 0.184 * deltat * pulsesPerMeter; // forward 368mm
    positionChange[1] = 0.184 * deltat * pulsesPerMeter;
  } else if (t < 5) {////////////////DARHA 3

    positionChange[0] = -4.77 * deltat * turn114 * pulsesPerTurn;
    positionChange[1] = 4.77 * deltat * turn114 * pulsesPerTurn; //turn 114.5 ccw
  } else if (t < 7) {////////////////DARHA 4

    positionChange[0] = 0.16 * deltat * pulsesPerMeter; // forward 293
    positionChange[1] = 0.16 * deltat * pulsesPerMeter;
  } else if (t < 9) {//5
    positionChange[0] = 2.4 * deltat * turn83 * pulsesPerTurn;
    positionChange[1] = -2.4 * deltat * turn83 * pulsesPerTurn; //33.3 degree cw
  } else if (t < 11) {/////////////////6
    positionChange[0] = 0.104 * deltat * pulsesPerMeter; // forward 206MM
    positionChange[1] = 0.104 * deltat * pulsesPerMeter;
  } else if (t < 13) {/////////////////7
    positionChange[0] = 4 * deltat * turn83 * pulsesPerTurn;
    positionChange[1] = -4 * deltat * turn83 * pulsesPerTurn; //83.3 degree cw
  } else if (t < 15) {/////////////////8
    positionChange[0] = 0.155 * deltat * pulsesPerMeter; // forward 310MM
    positionChange[1] = 0.155 * deltat * pulsesPerMeter;
  }
  else if (t < 17) {/////////////////9
    positionChange[0] = -3.9 * deltat * turn61 * pulsesPerTurn;
    positionChange[1] = 3.9 * deltat * turn61 * pulsesPerTurn; //turn 61.9 ccw
  } else if (t < 19) {/////////////////10
    positionChange[0] = 0.244 * deltat * pulsesPerMeter; // forward 486MM
    positionChange[1] = 0.244 * deltat * pulsesPerMeter;
  }
  else if (t < 20) {
    positionChange[0] = -13 * deltat * turn22 * pulsesPerTurn;
    positionChange[1] = 13 * deltat * turn22 * pulsesPerTurn; //22.9 degree ccw
  }
  else if (t < 23) {
    positionChange[0] = 0.174 * deltat * pulsesPerMeter; // forward 522MM
    positionChange[1] = 0.174 * deltat * pulsesPerMeter;
  }
  else if (t < 24) {
    positionChange[0] = 10 * deltat * turn22 * pulsesPerTurn;
    positionChange[1] = -10 * deltat * turn22 * pulsesPerTurn; //22.9 degree cw
  }
  else if (t < 26) {
    positionChange[0] = 0.06 * deltat * pulsesPerMeter; // forward 120MM
    positionChange[1] = 0.06 * deltat * pulsesPerMeter;
  }

  else {
    MOVE = false;
  }
  for (int k = 0; k < 2; k++) {
    target_f[k] = target_f[k] + positionChange[k];
  }
  target[0] = (long) target_f[0];
  target[1] = (long) target_f[1];
}

void moove() {


  if (St == 0) {
    St = micros(); // Store the start time on the first call
  }

  long currT = micros() - St;

  //Serial.print(currT);
  float deltaT = ((float) (currT - prevT)) / ( 1.0e6 );
  prevT = currT;
  setTarget(currT / 1.0e6, deltaT);
  long pos[2];
  ATOMIC_BLOCK(ATOMIC_RESTORESTATE) {
    for (int k = 0; k < NMOTORS; k++) {
      pos[k] = posi[k];
    }
  }
  for (int k = 0; k < NMOTORS; k++) {
    int pwr, dir;
    pid[k].evalu(pos[k], target[k], deltaT, pwr, dir);
    setMotor(dir, pwr, pwm[k], in1[k], in2[k]);
  }
  for (int i = 0; i < 2; i++) {
    Serial.print(target[i]);
    Serial.print(" ");
  }
  for (int i = 0; i < 2; i++) {
    Serial.print(pos[i]);
    Serial.print(" ");
  }
  Serial.println();
}

const int BASE_SPEED = 255;
const int MAX_SPEED = 255;

float Kp = 0.1;
float Ki = 0;
float Kd = 0.08;
int lastError = 0;
int integral = 0;

uint16_t position;
uint16_t position1;
uint16_t position2;



void PrepareColorSensor() {
  if (tcs.begin()) {
    Serial.println("Found sensor");
  } else {
    Serial.println("No TCS34725 found ... check your connections");
    while (1)
      ;
  }
}

int DetectRed() {
  uint16_t clear, red, green, blue;

  tcs.getRawData(&red, &green, &blue, &clear);

  // Calculate total color intensity
  uint32_t sum = clear;

  // Calculate the ratio of red to the total color intensity
  float redRatio = (float)red / sum;

  // You can adjust this threshold based on your specific application
  float redThreshold = 0.5;  // Adjust this threshold as needed

  // Check if the ratio of red is above the threshold
  if (redRatio > redThreshold) {
    return 1;
  } else {
    return 0;
  }
}



void setMotors(int speedA, int speedB) {
  if (speedA < 5 && speedA >= 0) {
    digitalWrite(in2[0], HIGH);
    digitalWrite(in1[0], HIGH);
    analogWrite(pwm[0], 0);
  }
  if (speedB < 5 && speedB >= 0) {
    digitalWrite(in2[1], HIGH);
    digitalWrite(in1[1], HIGH);
    analogWrite(pwm[1], 0);
  }
  if (speedA < 0) {
    digitalWrite(in2[0], HIGH);
    digitalWrite(in1[0], LOW);
    analogWrite(pwm[0], -speedA);
  } else {
    digitalWrite(in2[0], LOW);
    digitalWrite(in1[0], HIGH);
    analogWrite(pwm[0], speedA);
  }


  if (speedB < 0) {
    digitalWrite(in2[1], HIGH);
    digitalWrite(in1[1], LOW);
    analogWrite(pwm[1], -speedB);

  } else {
    digitalWrite(in2[1], LOW);
    digitalWrite(in1[1], HIGH);
    analogWrite(pwm[1], speedB);
  }
}




void setup() {
  Serial.begin(9600);


  pinMode(in2[1], OUTPUT);
  pinMode(in1[1], OUTPUT);
  pinMode(in2[0], OUTPUT);
  pinMode(in1[0], OUTPUT);
  pinMode(pwm[0], OUTPUT);
  pinMode(pwm[1], OUTPUT);
  pinMode(52, OUTPUT);
  pinMode(50, OUTPUT);
  pinMode(48, OUTPUT);
  pinMode(46, OUTPUT);
  pinMode(44, OUTPUT);
  digitalWrite(52, LOW);
  digitalWrite(50, LOW);
  digitalWrite(48, LOW);
  digitalWrite(46, LOW);
  digitalWrite(44, LOW);


  qtr.setTypeRC();
  qtr2.setTypeRC();

  qtr.setSensorPins((const uint8_t[]) {
    A15, A14, A13, A12, A11, A10, A9, A8
  },
  SensorCount);
  qtr2.setSensorPins((const uint8_t[]) {
    A7, A6, A5, A4, A3, A2, A1, A0
  },
  SensorCount2);


  qtr.setEmitterPin(23);
  qtr2.setEmitterPin(22);



  pinMode(49, OUTPUT);
  digitalWrite(49, HIGH);

  Serial.println("Start");

  pinMode(LED_BUILTIN, OUTPUT);
  digitalWrite(LED_BUILTIN, HIGH);



  PrepareColorSensor();


  Serial.begin(9600);
  for (int k = 0; k < NMOTORS; k++) {
    pinMode(enca[k], INPUT);
    pinMode(encb[k], INPUT);
    pid[k].setParams(5, 0.12, 0.022, 255);
  }
  attachInterrupt(digitalPinToInterrupt(enca[M0]), readEncoder<M0>, RISING);
  attachInterrupt(digitalPinToInterrupt(enca[M1]), readEncoder<M1>, RISING);

  //
  setMotors(70, 70);
  delay(800);
}

void pidR() {

  qtr.read(sensorValues);
  qtr2.read(sensorValues2);
  // Assuming SensorCount is defined somewhere in your code

  // Process sensor values for the first array
  if (sensorValues2[0] > 1500) {
    position = (1 * 1000) + 7000;
  }

  // Process sensor values for the second array
  else if (sensorValues[7] > 1500) {
    position = 7 * 1000;
  } else if (sensorValues2[7] > 1500) {
    position = (7 * 1000) + 7000;
  } else if (sensorValues[0] > 1500) {
    position = 0 * 1000;
  } else if (sensorValues2[6] > 1500) {
    position = (6 * 1000) + 7000;
  } else if (sensorValues[1] > 1500) {
    position = 1 * 1000;
  } else if (sensorValues2[5] > 1500) {
    position = (5 * 1000) + 7000;
  } else if (sensorValues[2] > 1500) {
    position = 2 * 1000;
  } else if (sensorValues2[4] > 1500) {
    position = (4 * 1000) + 7000;
  } else if (sensorValues[3] > 1500) {
    position = 3 * 1000;
  } else if (sensorValues2[3] > 1500) {
    position = (3 * 1000) + 7000;
  } else if (sensorValues[4] > 1500) {
    position = 4 * 1000;
  } else if (sensorValues2[2] > 1500) {
    position = (2 * 1000) + 7000;
  }

  else if (sensorValues[5] > 1500) {
    position = 5 * 1000;
  } else if (sensorValues2[1] > 1500) {
    position = (1 * 1000) + 7000;
  } else if (sensorValues[6] > 1500) {
    position = 6 * 1000;
  }



  //Serial.print(position1);
  //Serial.print("  ");
  //Serial.print(position2);
  //Serial.print("  ");
  //Serial.println(position);


  int error = position - 7000;
  integral += error;

  integral = constrain(integral, -10000, 10000);

  int derivative = error - lastError;

  int speedDifference = Kp * error + Ki * integral + Kd * derivative;

  int speedA = BASE_SPEED + speedDifference;  // Right
  int speedB = BASE_SPEED - speedDifference;  // Left


  speedA = constrain(speedA, -100, MAX_SPEED);
  speedB = constrain(speedB, -135, MAX_SPEED);
  //  Serial.print("A:");
  //  Serial.print(speedA);
  //  Serial.print("   B:");
  //  Serial.println(speedB);

  setMotors(speedA, speedB);

  lastError = error;
}


// void pidL() {

//   qtr.read(sensorValues);
//   qtr2.read(sensorValues2);

//   for (uint8_t i = 0; i < SensorCount; i++) {
//     //  Serial.print(sensorValues[i]);
//     // Serial.print('\t');
//   }
//   //Serial.println();

//   for (uint8_t i = 0; i < SensorCount; i++) {
//     //    Serial.print(sensorValues2[i]);
//     //    Serial.print('\t');

//     if (sensorValues2[i] > 1500) {
//       position = (i * 1000) + 7000;
//     }
//   }

//   for (uint8_t i = 0; i < SensorCount; i++) {
//     //    Serial.print(sensorValues[i]);
//     //    Serial.print('\t');

//     if (sensorValues[i] > 1500) {
//       position = i * 1000;
//     }
//   }
//   //
//   //Serial.print(position1);
//   //Serial.print("  ");
//   //Serial.print(position2);
//   //Serial.print("  ");
//   //Serial.println(position);

//   int error = position - 8000;
//   integral += error;

//   integral = constrain(integral, -10000, 10000);

//   int derivative = error - lastError;

//   int speedDifference = Kp * error + Ki * integral + Kd * derivative;

//   int speedA = BASE_SPEED + speedDifference;  // Right
//   int speedB = BASE_SPEED - speedDifference;  // Left


//   speedA = constrain(speedA, -84, MAX_SPEED);
//   speedB = constrain(speedB, -84, MAX_SPEED);
//   //  Serial.print("A:");
//   //  Serial.print(speedA);
//   //  Serial.print("   B:");
//   //  Serial.println(speedB);

//   setMotors(speedA, speedB);

//   lastError = error;
// }
void FollowNigga_R() {

  qtr.read(sensorValues);
  qtr2.read(sensorValues2);
  // Assuming SensorCount is defined somewhere in your code

  // Process sensor values for the second array
  if (sensorValues2[0] < 1500) {
    position = (0 * 1000) + 7000;
  } else if (sensorValues[7] < 1500) {
    position = 7 * 1000;
  } else if (sensorValues2[7] < 1500) {
    position = (7 * 1000) + 7000;
  } else if (sensorValues[0] < 1500) {
    position = 0 * 1000;
  } else if (sensorValues2[6] < 1500) {
    position = (6 * 1000) + 7000;
  } else if (sensorValues[1] < 1500) {
    position = 1 * 1000;
  } else if (sensorValues2[5] < 1500) {
    position = (5 * 1000) + 7000;
  } else if (sensorValues[2] < 1500) {
    position = 2 * 1000;
  } else if (sensorValues2[4] < 1500) {
    position = (4 * 1000) + 7000;
  } else if (sensorValues[3] < 1500) {
    position = 3 * 1000;
  } else if (sensorValues2[3] < 1500) {
    position = (3 * 1000) + 7000;
  } else if (sensorValues[4] < 1500) {
    position = 4 * 1000;
  } else if (sensorValues2[2] < 1500) {
    position = (2 * 1000) + 7000;
  } else if (sensorValues[5] < 1500) {
    position = 5 * 1000;
  } else if (sensorValues2[1] < 1500) {
    position = (1 * 1000) + 7000;
  } else if (sensorValues[6] < 1500) {
    position = 6 * 1000;
  }
  if (sensorValues[0] > 1500 && sensorValues[1] > 1500 && sensorValues[2] > 1500 && sensorValues[3] > 1500 && sensorValues[4] > 1500 && sensorValues[5] > 1500 && sensorValues[6] > 1500 && sensorValues[7] > 1500 && sensorValues2[0] > 1500 && sensorValues2[1] > 1500 && sensorValues2[2] > 1500 && sensorValues2[3] > 1500 && sensorValues2[4] > 1500 && sensorValues2[5] > 1500 && sensorValues2[6] > 1500 && sensorValues2[7] > 1500) {

    position = 7000;

  }


  //Serial.print(position1);
  //Serial.print("  ");
  //Serial.print(position2);
  //Serial.print("  ");
  //Serial.println(position);


  int error = position - 7000;
  integral += error;

  integral = constrain(integral, -10000, 10000);

  int derivative = error - lastError;

  int speedDifference = Kp * error + Ki * integral + Kd * derivative;

  int speedA = BASE_SPEED - 50 + speedDifference; // Right
  int speedB = BASE_SPEED - 50 - speedDifference; // Left


  speedA = constrain(speedA, -180, MAX_SPEED);
  speedB = constrain(speedB, -180, MAX_SPEED);
  //  Serial.print("A:");
  //  Serial.print(speedA);
  //  Serial.print("   B:");
  //  Serial.println(speedB);

  setMotors(speedA, speedB);

  lastError = error;
}

int tColeur = 0;

void loop() {
 
}
void loooop() {
  moove();
}
